//
// The MIT License (MIT)
// Copyright (c) 2016 Adriano Repetti

// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// - The above copyright notice and this permission notice shall be
//   included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Collections.Generic;
using System.IO;
using MicroBench.Engine.Calculations;

namespace MicroBench.Engine.Renderer
{
	/// <summary>
	/// Base class for renderers which creates an output from benchmark results.
	/// </summary>
	public abstract class OutputRenderer
	{
		/// <summary>
		/// Gets/sets the object responsible to calculate descriptive values from
		/// benchmark results.
		/// </summary>
		/// <value>
		/// The object responsible to calculate descriptive values (such as average
		/// execution time from a set of tests). Default value is <see langword="null"/>
		/// then a calculatore must be specified before renderer can be used.
		/// </value>
		public Statistics Statistics
		{
			get;
			set;
		}

		/// <summary>
		/// Creates a text document from benchmark results.
		/// </summary>
		/// <param name="benchmarks">Benchmarks to include in generated output.</param>
		/// <returns>
		/// UTF-8 stream for the text document generated by this renderer.
		/// </returns>
		/// <exception cref="InvalidOperationException">
		/// If <see cref="Statistics"/> has not been set.
		/// </exception>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="benchmarks"/> is <see langword="null"/>.
		/// </exception>
		/// <exception cref="ArgumentException">
		/// If any element of <paramref name="benchmarks"/> is <see langword="null"/>.
		/// </exception>
		public abstract byte[] Render(IEnumerable<Benchmark> benchmarks);

		/// <summary>
		/// Creates a text document from benchmark results.
		/// </summary>
		/// <param name="benchmarks">Benchmarks to include in generated output.</param>
		/// <param name="outputPath">Full path where rendered output is saved (as UTF-8 encoded text file).</param>
		/// <exception cref="InvalidOperationException">
		/// If <see cref="Statistics"/> has not been set.
		/// </exception>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="benchmarks"/> is <see langword="null"/>.
		/// </exception>
		/// <exception cref="ArgumentException">
		/// If any element of <paramref name="benchmarks"/> is <see langword="null"/>.
		/// </exception>
		public virtual void RenderTo(string outputPath, IEnumerable<Benchmark> benchmarks)
		{
			File.WriteAllBytes(outputPath, Render(benchmarks));
		}
	}
}
